// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
  urlSearchParamsBodySerializer,
  formDataBodySerializer,
} from "@hey-api/client-axios";
import type {
  AuthJwtLoginData,
  AuthJwtLoginError,
  AuthJwtLoginResponse,
  AuthJwtLogoutError,
  AuthJwtLogoutResponse,
  RegisterRegisterData,
  RegisterRegisterError,
  RegisterRegisterResponse,
  ResetForgotPasswordData,
  ResetForgotPasswordError,
  ResetForgotPasswordResponse,
  ResetResetPasswordData,
  ResetResetPasswordError,
  ResetResetPasswordResponse,
  VerifyRequestTokenData,
  VerifyRequestTokenError,
  VerifyRequestTokenResponse,
  VerifyVerifyData,
  VerifyVerifyError,
  VerifyVerifyResponse,
  UsersCurrentUserError,
  UsersCurrentUserResponse,
  UsersPatchCurrentUserData,
  UsersPatchCurrentUserError,
  UsersPatchCurrentUserResponse,
  UsersUserData,
  UsersUserError,
  UsersUserResponse,
  UsersPatchUserData,
  UsersPatchUserError,
  UsersPatchUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserError,
  UsersDeleteUserResponse,
  GenerateVideoData,
  GenerateVideoError,
  GenerateVideoResponse,
  UploadVideoData,
  UploadVideoError,
  UploadVideoResponse,
  ListVideosData,
  ListVideosError,
  ListVideosResponse,
  GetVideoData,
  GetVideoError,
  GetVideoResponse,
  DeleteVideoData,
  DeleteVideoError,
  DeleteVideoResponse,
  StreamVideoData,
  StreamVideoError,
  StreamVideoResponse,
  SynthesizeSpeechData,
  SynthesizeSpeechError,
  SynthesizeSpeechResponse,
  GenerateImageData,
  GenerateImageError,
  GenerateImageResponse,
  CreateLessonData,
  CreateLessonError,
  CreateLessonResponse,
  AddVideoToLessonData,
  AddVideoToLessonError,
  AddVideoToLessonResponse,
  GetLessonData,
  GetLessonError,
  GetLessonResponse,
  GetVideoByIndexData,
  GetVideoByIndexError,
  GetVideoByIndexResponse,
  HasNextVideoData,
  HasNextVideoError,
  HasNextVideoResponse,
  GenerateScriptFromPdfData,
  GenerateScriptFromPdfError,
  GenerateScriptFromPdfResponse,
  SaveScriptData,
  SaveScriptError,
  SaveScriptResponse,
  RootError,
  RootResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Auth:Jwt.Login
 */
export const authJwtLogin = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AuthJwtLoginData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthJwtLoginResponse,
    AuthJwtLoginError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/auth/jwt/login",
  });
};

/**
 * Auth:Jwt.Logout
 */
export const authJwtLogout = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthJwtLogoutResponse,
    AuthJwtLogoutError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/jwt/logout",
  });
};

/**
 * Register:Register
 */
export const registerRegister = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<RegisterRegisterData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RegisterRegisterResponse,
    RegisterRegisterError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/register",
  });
};

/**
 * Reset:Forgot Password
 */
export const resetForgotPassword = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ResetForgotPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ResetForgotPasswordResponse,
    ResetForgotPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/forgot-password",
  });
};

/**
 * Reset:Reset Password
 */
export const resetResetPassword = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ResetResetPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ResetResetPasswordResponse,
    ResetResetPasswordError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/reset-password",
  });
};

/**
 * Verify:Request-Token
 */
export const verifyRequestToken = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<VerifyRequestTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    VerifyRequestTokenResponse,
    VerifyRequestTokenError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/request-verify-token",
  });
};

/**
 * Verify:Verify
 */
export const verifyVerify = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<VerifyVerifyData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    VerifyVerifyResponse,
    VerifyVerifyError,
    ThrowOnError
  >({
    ...options,
    url: "/auth/verify",
  });
};

/**
 * Users:Current User
 */
export const usersCurrentUser = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersCurrentUserResponse,
    UsersCurrentUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/me",
  });
};

/**
 * Users:Patch Current User
 */
export const usersPatchCurrentUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersPatchCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UsersPatchCurrentUserResponse,
    UsersPatchCurrentUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/me",
  });
};

/**
 * Users:User
 */
export const usersUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersUserResponse,
    UsersUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{id}",
  });
};

/**
 * Users:Patch User
 */
export const usersPatchUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersPatchUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UsersPatchUserResponse,
    UsersPatchUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{id}",
  });
};

/**
 * Users:Delete User
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UsersDeleteUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    UsersDeleteUserResponse,
    UsersDeleteUserError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{id}",
  });
};

/**
 * Generate Video
 */
export const generateVideo = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GenerateVideoData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    GenerateVideoResponse,
    GenerateVideoError,
    ThrowOnError
  >({
    ...options,
    url: "/videos/generate",
  });
};

/**
 * Upload Video
 * Upload a video file to disk and save metadata to database
 */
export const uploadVideo = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<UploadVideoData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UploadVideoResponse,
    UploadVideoError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
    url: "/videos/upload",
  });
};

/**
 * List Videos
 * Get all videos for the authenticated user
 */
export const listVideos = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ListVideosData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListVideosResponse,
    ListVideosError,
    ThrowOnError
  >({
    ...options,
    url: "/videos/",
  });
};

/**
 * Get Video
 * Get a specific video's metadata
 */
export const getVideo = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetVideoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetVideoResponse,
    GetVideoError,
    ThrowOnError
  >({
    ...options,
    url: "/videos/{video_id}",
  });
};

/**
 * Delete Video
 * Delete a video and its file from disk
 */
export const deleteVideo = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteVideoData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteVideoResponse,
    DeleteVideoError,
    ThrowOnError
  >({
    ...options,
    url: "/videos/{video_id}",
  });
};

/**
 * Stream Video
 * Stream a video file
 */
export const streamVideo = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<StreamVideoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    StreamVideoResponse,
    StreamVideoError,
    ThrowOnError
  >({
    ...options,
    url: "/videos/{video_id}/stream",
  });
};

/**
 * Synthesize Speech
 * Generate speech from text using Hume.ai TTS API.
 *
 * Args:
 * request: TTS request containing text, voice description, and format
 *
 * Returns:
 * Audio URL or base64-encoded audio data
 */
export const synthesizeSpeech = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SynthesizeSpeechData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SynthesizeSpeechResponse,
    SynthesizeSpeechError,
    ThrowOnError
  >({
    ...options,
    url: "/tts/synthesize",
  });
};

/**
 * Generate Image
 * Generate an image using DALL-E based on a text prompt.
 *
 * Args:
 * request: Dalle request containing the prompt and desired image size.
 *
 * Returns:
 * Image URL or image data
 */
export const generateImage = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GenerateImageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    GenerateImageResponse,
    GenerateImageError,
    ThrowOnError
  >({
    ...options,
    url: "/ttimage/generateImage",
  });
};

/**
 * Create Lesson
 */
export const createLesson = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreateLessonData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateLessonResponse,
    CreateLessonError,
    ThrowOnError
  >({
    ...options,
    url: "/lessons/create",
  });
};

/**
 * Add Video To Lesson
 */
export const addVideoToLesson = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AddVideoToLessonData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AddVideoToLessonResponse,
    AddVideoToLessonError,
    ThrowOnError
  >({
    ...options,
    url: "/lessons/{lesson_id}/add_video",
  });
};

/**
 * Get Lesson
 */
export const getLesson = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetLessonData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLessonResponse,
    GetLessonError,
    ThrowOnError
  >({
    ...options,
    url: "/lessons/{lesson_id}",
  });
};

/**
 * Get Video By Index
 */
export const getVideoByIndex = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetVideoByIndexData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetVideoByIndexResponse,
    GetVideoByIndexError,
    ThrowOnError
  >({
    ...options,
    url: "/lessons/{lesson_id}/video/{index}",
  });
};

/**
 * Has Next Video
 */
export const hasNextVideo = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<HasNextVideoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HasNextVideoResponse,
    HasNextVideoError,
    ThrowOnError
  >({
    ...options,
    url: "/lessons/{lesson_id}/video/{index}/has_next",
  });
};

/**
 * Generate Script From Pdf
 * Accept a PDF upload and return a 2-minute teaching script.
 */
export const generateScriptFromPdf = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GenerateScriptFromPdfData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    GenerateScriptFromPdfResponse,
    GenerateScriptFromPdfError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
    url: "/api/scripts/generate-script-from-pdf",
  });
};

/**
 * Save Script
 * Save the generated script to the database.
 */
export const saveScript = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SaveScriptData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    SaveScriptResponse,
    SaveScriptError,
    ThrowOnError
  >({
    ...options,
    url: "/api/scripts/save-script",
  });
};

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<RootResponse, RootError, ThrowOnError>(
    {
      ...options,
      url: "/",
    },
  );
};
